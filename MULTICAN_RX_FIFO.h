/********************************************************************************************************************
 * \file MULTICAN_RX_FIFO.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef MULTICAN_RX_FIFO_H_
#define MULTICAN_RX_FIFO_H_ 1

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxMultican_Can.h"
#include "IfxMultican.h"
#include "IfxPort.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define SRC_MESSAGE_OBJECT_ID       (IfxMultican_MsgObjId)0     /* Source standard message object ID                 */
#define RX_FIFO_BASE_OBJECT_ID      (IfxMultican_MsgObjId)1     /* RX FIFO base message object ID                    */
#define SLAVE_MESSAGE_OBJECT_ID     (IfxMultican_MsgObjId)2     /* FIFO slave message object ID                      */
#define CAN_MESSAGE_ID              0x777                       /* Message ID that will be used in arbitration phase */
#define BAD_CAN_MESSAGE_ID          0x444                       /* Message ID that will be used in arbitration phase */
#define RX_FIFO_SIZE                3                           /* Number of message objects in a FIFO structure     */
#define OVERFLOW_INTERRUPT_SRC_ID   IfxMultican_SrcId_1         /* Overflow interrupt service request ID             */
#define PIN0                        6                           /* LED used is connected to this pin                 */
#define INVALID_DATA_VALUE          (uint32)0xDEADBEEF          /* Used to invalidate RX messages data content       */
#define INVALID_ID_VALUE            (uint32)0xFFFFFFFF          /* Used to invalidate RX messages ID value           */
#define BAD_DATA_VALUE              (uint32)0xCAFECAFE          /* Used to invalidate RX messages data content       */
//#define BAD_ID_VALUE                (uint32)0x00000000          /* Used to invalidate RX messages ID value           */
#define INVALID_LENGTH_VALUE        (IfxMultican_DataLengthCode)0   /* Used to invalidate RX messages length value   */
#define ISR_PRIORITY_CAN_OVERFLOW   1                           /* Define the CAN Overflow interrupt priority        */
#define ISR_PROVIDER_CAN_OVERFLOW   (IfxSrc_Tos)1               /* Define Core 1 as CAN Overflow interrupt provider  */
#define NUMBER_OF_CAN_MESSAGES      (NUMBER_OF_GOOD_CAN_MESSAGES + NUMBER_OF_BAD_CAN_MESSAGES)                          /* Define the number of CAN messages to be sent      */
#define NUMBER_OF_GOOD_CAN_MESSAGES  3                          /* Define the number of malicious CAN messages to be sent      */
#define NUMBER_OF_BAD_CAN_MESSAGES  0                          /* Define the number of malicious CAN messages to be sent      */
//#define NUMBER_OF_TOTAL_CAN_MESSAGES  11                       /* Define the number of malicious CAN messages to be sent      */
#define NUMBER_OF_RECEIVED_MESSAGES ((NUMBER_OF_CAN_MESSAGES / RX_FIFO_SIZE) * \
                                        RX_FIFO_SIZE)           /* Define the expected number of received CAN
                                                                   messages by the RX FIFO object that are read by
                                                                   the ISR                                           */

/*********************************************************************************************************************/
/*--------------------------------------------------Data Structures--------------------------------------------------*/
/*********************************************************************************************************************/
typedef struct
{
    IfxMultican_Can                 can;             /* CAN module handle to HW module SFR set                       */
    IfxMultican_Can_Config          canConfig;       /* CAN module configuration structure                           */
    IfxMultican_Can_Node            canNode0;        /* CAN node 0 handle data structure                             */
    IfxMultican_Can_Node            canNode1;        /* CAN node 1 handle data structure                             */
    IfxMultican_Can_NodeConfig      canNodeConfig;   /* CAN node configuration structure                             */
    IfxMultican_Can_MsgObj          canSrcMsgObj;    /* CAN source standard message object handle data structure     */
    IfxMultican_Can_MsgObj          canDstMsgObj;    /* CAN destination standard message object handle data structure*/
    IfxMultican_Can_MsgObjConfig    canMsgObjConfig; /* CAN message object configuration structure                   */
    IfxMultican_Message             txMsg;           /* Transmitted CAN message structure                            */
    IfxMultican_Message             rxMsg[NUMBER_OF_CAN_MESSAGES];  /* Received CAN messages array                   */
} AppMulticanType;

typedef enum
{
    CanCommunicationStatus_Success = 0,
    CanCommunicationStatus_Error_noNewDataReceived,
    CanCommunicationStatus_Error_newDataButOneLost,
    CanCommunicationStatus_Error_notExpectedMessageId,
    CanCommunicationStatus_Error_notExpectedLengthCode,
    CanCommunicationStatus_Error_notExpectedData
} CanCommunicationStatusType;

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
IFX_EXTERN boolean g_allMessagesReceived;

/*********************************************************************************************************************/
/*-----------------------------------------------Function Prototypes-------------------------------------------------*/
/*********************************************************************************************************************/
void canIsrOverflowHandler(void);
void initMultican(void);
void transmitCanMessages(void);
void verifyCanMessages(void);
void initLed(void);
void initRxQueue(void);

#endif /* MULTICAN_RX_FIFO_H_ */
